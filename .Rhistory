.libPaths( c( .libPaths(), "~/userLibrary") )
.libPaths( c( .libPaths(), "C:/R/Packages") )
.libPaths
.libPaths()
install.packages("dplyr", lib="C:/R/Packages")
.libPaths()
.libPaths( c("C:/R/Packages", .libPaths()) )
install.packages("ggplot")
install.packages("ggplot", lib="C:/R/Packages")
install.packages("ggplot2")
install.packages("caret")
install.packages("sqldf")
install.packages("devtools")
install.packages("jsonlite")
install.packages("pdftools")
library(pdftools)
library("pdftools", lib.loc="C:/R/Packages")
library("ggplot2", lib.loc="C:/R/Packages")
library("codetools", lib.loc="C:/Program Files/R/R-3.3.3/library")
library("colorspace", lib.loc="C:/R/Packages")
library("crayon", lib.loc="C:/R/Packages")
.libPaths()
install.packages("ggplot2")
library(ggplot2)
install.packages("Rcpp")
install.packages("Rcpp")
library(ggplot2)
library("pdftools", lib.loc="C:/R/Packages")
nvsr65_05 <- pdf_text("http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf")
nvsr65_05 <- pdf_text("http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf")
head(strsplit(nvsr65_05[ [  1 ] ], "\n")[ [ 1 ] ])
head(strsplit(nvsr65_05[ [  1 ] ], "\n")[ [ 1 ] ])
head(strsplit(nvsr65_05[[1]], "\n")[[1]])
install.packages("tesseract")
library(tesseract)
eng <- tesseract("eng")
text <- tesseract::ocr("http://jeroen.github.io/images/testocr.png", engine = eng)
text <- tesseract::ocr("http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf", engine = eng)
text <- tesseract::ocr("C:/Data/Comments/CMS-2017-0163/Attachments/CMS-2017-0163-DRAFT-0411-A1.pdf", engine = eng)
results <- tesseract::ocr_data("C:/Data/Comments/CMS-2017-0163/Attachments/CMS-2017-0163-DRAFT-0411-A1.pdf", engine = eng)
print(text, n = 20)
print(results, n = 20)
View(results)
head(results.confidence)
summary(results$confidence)
.libPaths( c("C:/R/Packages", .libPaths()) )
install.packages("shiny", lib="C:/R/Packages")
install.packages("yhat", lib="C:/R/Packages")
install.packages("stringr", lib="C:/R/Packages")
install.packages("forecast", lib="C:/R/Packages")
install.packages("randomForest", lib="C:/R/Packages")
install.packages("reshape2", lib="C:/R/Packages")
install.packages("lubridate", lib="C:/R/Packages")
install.packages("data.table", lib="C:/R/Packages")
install.packages("googleVis", lib="C:/R/Packages")
install.packages("caret", lib="C:/R/Packages")
install.packages("car", lib="C:/R/Packages")
install.packages("tm", lib="C:/R/Packages")
install.packages("twitteR", lib="C:/R/Packages")
install.packages("gbm", lib="C:/R/Packages")
install.packages("e1071", lib="C:/R/Packages")
install.packages("glmnet", lib="C:/R/Packages")
install.packages("tau", lib="C:/R/Packages")
install.packages("knitr", lib="C:/R/Packages")
install.packages("NLP", lib="C:/R/Packages")
.libPaths( c("C:/R/Packages", .libPaths()) )
.libPaths( c("C:/R/Packages", .libPaths()) )
library(tidyverse)
########################
# Load FDMS Reports    #
########################
comLoc <- "C:/Data/Comments/CMS-2017-0163/FDMS/files"
########################
# Load FDMS Reports    #
########################
library(readxl)
comReport <- read_excel(paste(comLoc, "/report.xlsx", sep=""), sheet = "Nonrulemaking-Public Submission")
comLoc <- "C:/Data/Comments/CMS-2017-0163/FDMS"
comReport <- read_excel(paste(comLoc, "/report.xlsx", sep=""), sheet = "Nonrulemaking-Public Submission")
View(comReport)
warnings()
unique(comReport)
count(comReport)
test <- unique(comReport)
View(test)
test <- count(comReport)
View(test)
test <- unique(comReport$Attachments)
comLoc <- "C:/Data/Comments/CMS-2017-0163/FDMS"
comReport <- read_excel(paste(comLoc, "/report.xlsx", sep=""), sheet = "Nonrulemaking-Public Submission")
View(comReport)
str(comReport)
test <- unique(comReport$`Organization Name`)
comReport$Site_Key <- substring(comReport$`Email Address`, regexpr("@", comReport$`Email Address`) + 1)
View(comReport)
########################
# Testing              #
########################
url <- paste('http://www.', siteDf[1, 'Site_Key'], sep='')
comReport$Site_Key <- substring(comReport$`Email Address`, regexpr("@", comReport$`Email Address`) + 1)
########################
# Getting Info         #
########################
pubSites <- c(NA,
"aim.com",
"aol.com",
"google.com",
"gmail.com",
'comcast.com',
'cox.net',
"cox.com",
'hotmail.com',
'icloud.com',
'yahoo.com',
'mail.com',
'att.net',
'bellsouth.net',
'charter.net',
'comcast.net',
"msn.com",
'gmail.co',
'outlook.com',
'verizon.net',
'ymail.com',
'aeneas.net')
siteDf <- subset(comReport, !(tolower(Site_Key) %in% pubSites))["Site_Key"]
siteDf <- distinct(siteDf)
siteDf <- subset(comReport, !(tolower(Site_Key) %in% pubSites))[c("Site_Key","Organization Name"]
siteDf <- subset(comReport, !(tolower(Site_Key) %in% pubSites))[c("Site_Key","Organization Name")]
View(siteDf)
siteDf <- distinct(siteDf)
########################
# Load FDMS Reports    #
########################
library(tidyverse)
.libPaths( c("C:/R/Packages", .libPaths()) )
########################
# Load FDMS Reports    #
########################
library(tidyverse)
siteDf <- distinct(siteDf)
########################
# Web Scraping         #
########################
library(rvest)
########################
# Testing              #
########################
url <- paste('http://www.', siteDf[1, 'Site_Key'], sep='')
webpage %>%
html_node("body") %>%
html_text()
webpage <- read_html(url)
webpage %>%
html_node("body") %>%
html_text()
url
########################
# Testing              #
########################
url <- paste('http://www.', siteDf[5, 'Site_Key'], sep='')
webpage <- read_html(url)
webpage %>%
html_node("body") %>%
html_text()
url
for (i in 1:nrow(siteDf)){
url <- paste('http://www.', siteDf[i, 'Site_Key'], sep='')
test <- HEAD(url)
if (test$status_code==200){
webpage <- read_html(url)
siteDf[i, 'htitle'] <- webpage %>%
html_node("title") %>%
html_text()}
}
library(httr)
for (i in 1:nrow(siteDf)){
url <- paste('http://www.', siteDf[i, 'Site_Key'], sep='')
test <- HEAD(url)
if (test$status_code==200){
webpage <- read_html(url)
siteDf[i, 'htitle'] <- webpage %>%
html_node("title") %>%
html_text()}
}
########################
# Getting Info         #
########################
pubSites <- c(NA,
"aim.com",
"aol.com",
"google.com",
"gmail.com",
'comcast.com',
'cox.net',
"cox.com",
'hotmail.com',
'icloud.com',
'yahoo.com',
'mail.com',
'att.net',
'bellsouth.net',
'charter.net',
'comcast.net',
"msn.com",
'gmail.co',
'outlook.com',
'verizon.net',
'ymail.com',
'me.com',
'aeneas.net')
siteDf <- subset(comReport, !(tolower(Site_Key) %in% pubSites))[c("Site_Key","Organization Name")]
siteDf <- distinct(siteDf)
for (i in 1:nrow(siteDf)){
url <- paste('http://www.', siteDf[i, 'Site_Key'], sep='')
test <- HEAD(url)
if (test$status_code==200){
webpage <- read_html(url)
siteDf[i, 'htitle'] <- webpage %>%
html_node("title") %>%
html_text()}
}
test <- HEAD(url)
test <- http_error(url)
test <- url_success(url)
test <- !http_error(url)
.libPaths( c("C:/R/Packages", .libPaths()) )
setwd("C:/Users/P6BQ/Desktop/DSCoLab-Spring-2018-Cohort-Material/data")
########################
# Download Attachments #
########################
attachList <- subset(comments, attachmentCount > 0)
api_key = "bbPnmY2FqvoazRuHseN0liEsWh0qI255CgJTsPAo"
#API call to get the number of record calls needs. API limits pull to 1000 records
countUrl = paste0("https://api.data.gov:443/regulations/v3/documents.json?api_key=",api_key,"&countsOnly=1&encoded=1&dct=PS&dktid=", dktid)
recCount <- fromJSON(countUrl)
pageCount <- ceiling(recCount$totalNumRecords/100)
for (i in 1:pageCount){
pageUrl = paste0("https://api.data.gov:443/regulations/v3/documents.json?api_key=", api_key, "&rpp=100&dct=PS&encoded=1&dktid=", dktid, "&po=", (i-1)*100)
dataPull <- fromJSON(pageUrl)
if (i==1){
comments <- data.frame(dataPull$documents)
} else {
tmp <- data.frame(dataPull$documents)
comments <- rbind(comments, tmp)
}
}
library(tm)
library(readxl)
library(rvest)
library(scrapeR)
library(jsonlite)
library(httr)
library(tidyverse)
dktid = "CMS-2017-0163"
api_key = "bbPnmY2FqvoazRuHseN0liEsWh0qI255CgJTsPAo"
#API call to get the number of record calls needs. API limits pull to 1000 records
countUrl = paste0("https://api.data.gov:443/regulations/v3/documents.json?api_key=",api_key,"&countsOnly=1&encoded=1&dct=PS&dktid=", dktid)
recCount <- fromJSON(countUrl)
pageCount <- ceiling(recCount$totalNumRecords/100)
for (i in 1:pageCount){
pageUrl = paste0("https://api.data.gov:443/regulations/v3/documents.json?api_key=", api_key, "&rpp=100&dct=PS&encoded=1&dktid=", dktid, "&po=", (i-1)*100)
dataPull <- fromJSON(pageUrl)
if (i==1){
comments <- data.frame(dataPull$documents)
} else {
tmp <- data.frame(dataPull$documents)
comments <- rbind(comments, tmp)
}
}
attachList <- subset(comments, attachmentCount > 0)
errflag = 1
for (comment in 1:nrow(attachList)){
for (doc in 1:attachList[comment, "attachmentCount"]){
attachUrl = paste("https://www.regulations.gov/contentStreamer?documentId=", attachList[comment, "documentId"], "&disposition=attachment&attachmentNumber=", doc, sep ="")
#testUrl = paste("https://www.regulations.gov/contentStreamer?documentId=", attachList[1, "documentId"], "&disposition=attachment&attachmentNumber=", 1, sep ="")
#test <- getURI(testUrl,header=TRUE,verbose=TRUE)
test <- HEAD(attachUrl)
if (test$status_code==200){
tmp <- test$headers$`content-disposition`
file <- substr(tmp, nchar(tmp)-1, nchar(tmp)-1)
file <- str_extract(tmp, "\\.[a-z]{3,4}")
download.file(attachUrl, paste0("files/",  attachList[comment, "documentId"], "-", doc, file), mode="wb")
} else if (errflag==1){
errorLog = data.frame(docId = attachList[comment, "documentId"], error = test$status_code)
errflag = errflag+1
} else {
errorLog[errflag, 1] = attachList[comment, "documentId"]
errorLog[errflag, 2] = error = test$status_code
errflag = errflag+1
}
}
}
setwd("C:/Users/P6BQ/Desktop/capstone.arthur.pignotti") #local location of github repo
for (comment in 1:nrow(attachList)){
for (doc in 1:attachList[comment, "attachmentCount"]){
attachUrl = paste("https://www.regulations.gov/contentStreamer?documentId=", attachList[comment, "documentId"], "&disposition=attachment&attachmentNumber=", doc, sep ="")
#testUrl = paste("https://www.regulations.gov/contentStreamer?documentId=", attachList[1, "documentId"], "&disposition=attachment&attachmentNumber=", 1, sep ="")
#test <- getURI(testUrl,header=TRUE,verbose=TRUE)
test <- HEAD(attachUrl)
if (test$status_code==200){
tmp <- test$headers$`content-disposition`
file <- substr(tmp, nchar(tmp)-1, nchar(tmp)-1)
file <- str_extract(tmp, "\\.[A-Za-z]{3,4}")
download.file(attachUrl, paste0("files/",  attachList[comment, "documentId"], "-", doc, file), mode="wb")
} else if (errflag==1){
errorLog = data.frame(docId = attachList[comment, "documentId"], error = test$status_code)
errflag = errflag+1
} else {
errorLog[errflag, 1] = attachList[comment, "documentId"]
errorLog[errflag, 2] = error = test$status_code
errflag = errflag+1
}
}
}
